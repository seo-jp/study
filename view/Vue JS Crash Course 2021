
view 파일 구조

- package.json


- public
정말 아무것도 할 필요가없음.
index.html은 브라우저에 로드되는 단일 페이지.
<div id="app></div>에 모든것을 뱉어냄.

main.js는 기본적인 진입 점.
App.vue는 크게 세가지 구성요소가 있음.
템플릿, 스크립트, 스타일

컴포넌트를 구성요소 로서 가져오는방법은?

<script>
import HelloWorld from './components/HelloWorld.vue'

export default {
  name: 'App',
  components: {
    HelloWorld
  }
}

</script>

저 export default 부분의 components 에 등록해줘야함.

간단한 구조를 살펴보자면 ..

<template>
  <img alt="Vue logo" src="./assets/logo.png">
  <HelloWorld msg="Welcome to Your Vue.js App" />
</template>

이렇게 msg에 데이터를 작성해준다.


그리고 HelloWorld.vue 파일로 가보면 ?

<template>
  <h1>{{ msg }}</h1>
</template>

<script>
export default {
  name: 'HelloWorld',
  props: {
    msg: String
  }
}
</script>

이렇게 props에 msg가! 그리고 뒤는 데이터타입을 서술하는건가...
대충 이렇게 돌아가는..듯


컴포넌트, 구성요소의 재사용

* Button.vue 파일

<template>
    <button :style="{background: color}">{{ text }}</button>
</template>

<script>
export default {
    name: "Button",
    props: {
        text: String,
        color: String
    }
};
</script>

버튼 기능의 컴포넌트를 하나 제작한다.
버튼 안에 들어갈 Text와 background 색상을 재사용 할 수 있는 구조이다.


* Header.vue 파일
<template>
<div>
  <h1>{{ title }}</h1>
  <Button text="야후" color="white" />
  <Button text="대박인데?" color="purple" />
</div>
</template>

<script>

import Button from '../shared-small-components/button'

export default {
    name: "header",
    components: {
        Button
    },
    props: {
        title: {
            type: String,
            default: 'Hello World',
        },
    },
    data() {
        return {
            leftIconShow: false,
            rihgtIconShow: false,
        };
    }
};
</script>

<style scoped>
    header{
        display: flex;
        justify-content: space-between;
    }
</style>

components 에 Button을 등록 해 주고,여러개의 버튼을 만들어 각각 다른 내용과 배경색을 가질 수 있다.



이벤트 설정 방법

<template>
    <button @click="onClick()" :style="{background: color}">{{ text }}</button>
</template>

<script>
export default {
    name: "Button",
    props: {
        text: String,
        color: String
    },
    methods: {
        onClick() {
            console.log('click')
        },
    }
};
</script>



Tasks 기능 추가

* App.vue

<template>
  <div id="app">
    <Header title="Task Tracker" />
    <Tasks :tasks="tasks" />
    <div id="content" class="content">
      <router-view></router-view>
    </div>
    <FootBar />
  </div>
</template>

<script>
import Header from './components/shared-components/Header.vue'
import FootBar from './components/shared-components/FootBar.vue'
import Tasks from './components/shared-components/Tasks.vue'

export default {
  name: 'App',
  components: {
    Header,
    FootBar,
    Tasks
  },
  data(){
    return {
      tasks: [],
    }
  },
  created() {
    this.tasks = [
      {
        id: 1,
        text: 'Doctors Appointment1',
        day: 'March 1st at 2:30pm',
        reminder: true,
      },
      {
        id: 2,
        text: 'Doctors Appointment2',
        day: 'March 1st at 3:30pm',
        reminder: true,
      },
      {
        id: 3,
        text: 'Doctors Appointment3',
        day: 'March 1st at 4:30pm',
        reminder: true,
      },
    ] 
  }
}
</script>

App.vue 에 데이터를 미리 추가한다.(create에 추가되면 데이터가 미리 로딩된 후 보여줌)

*Tasks.vue

<template>
    <ul>
        <li :key="task.id" v-for="task in tasks">
            <Task :task="task" />
        </li>
    </ul>
</template>

<script>

import Task from './Task'

export default {
    name: 'Tasks',
    props: {
        tasks: Array
    },
    components: {
        Task
    }
};
</script>

강의는 v-for을 div에 걸어줬는데 똑같이 하니까 계속 오류가났다.
삽질끝에 알아낸건 div에선 v-for을 걸어주지못하나봄 ..
내 버전만 그런건지 ,, 그래서 일단 ul li로 바꿔줌

* Task.vue

<template>
    <div class="task">
        <h3>{{ task.text }}</h3>
        <p>{{ task.day }}</p>
    </div>
    
</template>

<script>
export default {
    name: 'Task',
    props: {
        task: Object
    }
}
</script>

<style scope>
    .task {
        background: #f4f4f4;
        margin: 5px;
        padding: 10px 20px;
        cursor: pointer;
    }

    .task.reminder {
        border-left: 5px solid green;
    }

    .task h3 {
        display: flet;
        align-items: center;
    }
</style>

굳이 Task와 Tasks를 나누는 이유는 뭘까 ..?!
이렇게 세세하게 다 나눠주는게 좋은구도인건가 ?



Reminder 된 데이터에 특정스타일 표시하기

*Task.vue

<template>
    <div :class="[task.reminder ? 'reminder' : '', 'task']">
        <h3>{{ task.text }}</h3>
        <i class="fas fa-times"></i>
        <p>{{ task.day }}</p>
    </div>
    
</template>

<script>
export default {
    name: 'Task',
    props: {
        task: Object
    }
}
</script>

<style scope>
    .fas {
        color: red;
    }

    .task {
        background: #f4f4f4;
        margin: 5px;
        padding: 10px 20px;
        cursor: pointer;
    }

    .task.reminder {
        border-left: 5px solid green;
    }

    .task h3 {
        display: flet;
        align-items: center;
    }
</style>

 <div :class="[task.reminder ? 'reminder' : '', 'task']"> 이렇게 관리하는듯.
 
 <i class="fas fa-times"></i> 같은경우는 cdn에서 가져온 style의 아이콘
 public index.html에 cnd에서 가져온 링크를 붙여넣기해주면 바로 사용가능하다.
 
 <!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="icon" href="<%= BASE_URL %>favicon.ico">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

난 요렇게 타이틀 위에 올려놧다.


삭제기능 만들기
  
- 자식 컴포넌트에서 부모 컴포넌트로 보내는 것이 $emit()
- 부모 컴포넌트에서 자식 컴포넌트로 보내는것이 props

* Task.vue

-template 부분
<i @click="onDelete(task.id)" class="fas fa-times"></i>
이렇게 click을 걸어주고 onDelete라는 메소드에 자신의 id값을 넘겨준다.

-script 부분
 methods: {
        onDelete(id) {
            this.$emit('delete-task', id)
        }
    }
onDelete(id) 메소드를 생성 한 후, $emit으로 id와 delete-task라는 값을 넘겨준다. (Tasks.vue에게)


*Tasks.vue

-template 부분
<li :key="task.id" v-for="task in tasks">
  <Task @delete-task="$emit('delete-task',task.id)" :task="task" />
</li>

바로 @delete-task 기재 후 $emit으로 데이터를 보내준다.

-script 부분
emits: ['delete-task']
이걸 추가해준다. 왜 이 페이지만 추가해주지 .. ?! @delete-task를 써서그런가?

*App.vue

-template 부분
<Tasks @delete-task="deleteTask" :tasks="tasks" />
왜여기선 id를 전달해주지않아도 괜찮은걸까 .. !?

-script 부분
  methods: {
    deleteTask(id) {
      if (confirm('Are you sure?')) {
        this.tasks = this.tasks.filter((task) => task.id !== id)
      }
    }
  },

...하하
왜이런 구조가 나오는건지.. 는 $emit 이벤트전달은 다른 강의도 찾아들어봐야겠다.


움,, 대충 해석해봄

일단 부모vue에서 @자식뷰에서의$emit 내용이름 <-- 이 형식으로 emit을 받아오는것이 가능한듯하다.
그리고 App.vue 에서 this.tasks = this.tasks.filter((task) => task.id !== id) 이부분은
기존의 tasks에 담겨있는 list들을 재구성 하라는 뜻임.
고로 filter로 예 아니요를 가려 , tasks에있는 task들을 넣어, 받아온id 즉 삭제하려는 id와 비교하는task.id들을 비교해 같지않은것들만 새로운 this.tasks에 담아준다는 뜻인듯.


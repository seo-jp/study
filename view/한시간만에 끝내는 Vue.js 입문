Vue.js는 웹프론트엔드 프레임워크 입니다.

- 컴포넌트 기반의 SPA를 구축할 수 있게 해주는 프레임워크

- 컴포넌트
1. 웹을 구성하는 로고,메뉴바,버튼,모달창 등 웹 페이지 내의 다양한 UI 요소
2. 재사용 가능하도록 구조화 한 것

- SPA
1. 단일 페이지 어플리케이션
2. 하나의 페이지 안에서 필요한 영역 부분만 로딩 되는 형태
3. 빠른 페이지 변환
4. 적은 트래픽 양

최초의 로딩 시 모든 js파일과 css파일을 가져와서 로딩을 하기때문에 처음 로딩하는 js파일 사이즈가 크면 클 수록
초기 로딩 시간이 길어지긴함.


Vue cli > 기본적으로 프로젝트 구조를 자동적으로 생성해줌. 웹팩 설정 등등 ... 굉장히 편리




1. Vue cli 설치

터미널 : npm install -g @vue/cli

2. 프로젝트 생성

터미널 : vue create 폴더명

-- 옵션 선택가능
default (babel,eslint 자동설치) / Manually (Babel,Linter 기본 / 타입스크립트 라우터 등등 ...)

일단 디폴트로 설치함.
그리고 vue 2,3 중에 선택가능한데 일단 나는 2로 선택.

3. 기본 폴더

build/ : webpack 빌드 관련 설정
config/ : 프로젝트에 사용되는 설정
 - dev.env.js : npm start 시 적용되는 설정
 - prod.env.js : npm run build로 배포 버전에 적용되는 설정
dist/: 배포버전의 Vue 어플리케이션 파일들이 모여있는 디렉토리. npm run build 명령어 실행시 생성
node_modules/: npm으로 설치되는 서드파트 라이브러리들이 모여있는 디렉토리
src/ : 실제 대부분의 코딩이 이루어지는 디렉토리
 - assets/ : 이미지 등 어플리케이션에 사용되는 파일들이 모여있는 디렉토리
 - components/ : Vue 컴포넌트들
 - router/ : vue-router 설정을 하는 디렉토리
 - App.vue : 가장 최상위 컴포넌트
 - main.js : 가장먼저 실행되는 자바스크립트 파일. Vue 인스턴스를 생성하는 역할
 - index.html : 어플리케이션의 뼈대가 되는 html파일

4. 서버 스타트

터미널 : npm run serve

5. Vue router 설치

터미널 : npm install vue-router --save

라우팅 : 웹페이지간의 이동수단. SPA에선 미리 해당하는 컴포넌트를 다 받아오고 라우팅을 이용해 특정부분을 갱신하는것.

5. layout 폴더 추가

src/component/ layout이라는 폴더를 추가.
Header나 Footer같이 레이아웃 페이지를 추가한다.

6. vue bootstrap 설치

터미널 : npm install vue bootstrap-vue bootstrap

그리고 부트스트랩을 쓰겠다는 의미로 main.js 에다가 추가를 해줘야함.

import Vue from 'vue'
import { BootstrapVue, IconsPlugin } from 'bootstrap-vue'

// Import Bootstrap an BootstrapVue CSS files (order is important)
import 'bootstrap/dist/css/bootstrap.css'
import 'bootstrap-vue/dist/bootstrap-vue.css'

// Make BootstrapVue available throughout your project
Vue.use(BootstrapVue)
// Optionally install the BootstrapVue icon components plugin
Vue.use(IconsPlugin)



7. Header.vue 작성

뷰는 크게 <template> 과 <scipt>로 구성되는데 템플릿은 말그대로 html적인 디자인담당, script는 자바스크립트 부분이라고 생각하면된다
부트스트랩 홈페이지에 가서 Navbar 코드를 복사해 템플릿 영역안에 붙여넣어준다.
그리고 스크립트 부분은
<script>
export default {
    name: "header",
};
</script>

이렇게 작성.


8. views 폴더 추가
src/component/ views라는 폴더를 추가.
페이지들 저장하는곳


9. App.vue 수정

<script>
import Header from './components/layout/Header.vue'

export default {
  name: 'App',
  components: {
    Header
  }
}
</script>

요렇게 방금 만들어준 헤더 컴포넌트로 갈아끼워준다.
그러면 템플릿에서 헤더 컴포넌트 사용가능.

<template>
  <div id="app">
    <Header />
  </div>
</template>

이렇게!
그리고 라우팅을 해야해서 새로 코드를 추가해주자.

<template>
  <div id="app">
    <Header />
    <div id="content" class="content">
      <router-view></router-view>
    </div>
  </div>
</template>

이렇게 헤더 밑에 path가 바뀔때마다 바뀔 페이지를 재로딩하는 방식의 설계.


10. views 파일에 Home.vue 추가

<template>
    <div>
        <h1>Welcome to Home!</h1>
    </div>
</template>

<script>
export default {
    
}
</script>

11. views 파일에 About.vue 추가

<template>
    <div>
        <h1>About page</h1>
    </div>
</template>

<script>
export default {
    
}
</script>

12. 라우터 선언

라우터는 설치 한 뒤에 사용하겠다고 선언을 해줘야한다.
src/router.js 라는 파일을 하나 만들자.

import Vue from "vue";
import VueRouter from "vue-router";
import Home from "./views/Home";
import About from "./views/About";

Vue.use(VueRouter);

const router = new VueRouter({
    mode: "history",
    routes: [
        {path:"/", component: Home},
        {path:"/about", component: About}
    ]
})

export default router;


그리고 이렇게 라우터를 선언해줘야한다!
그리고 다시 main.js로 고고

import Vue from 'vue'
import App from './App.vue'
import router from './router'
요렇게 라우터를 import 시킨 뒤

new Vue({
  router,
  render: h => h(App),
}).$mount('#app')

여기서 라우터를 정의해주면된다.
이렇게되면 앱을 마운트할때 라우트를 쓸수있는 구조가 된다.



13. Vue의 라이프사이클

- beforeCreate : Vue.js 라이프사이클중 가장먼저 실행이되는 훅
- create : 실제 뷰 컴퍼넌트 내에서 다양한 메소드 등 특정데이터를 감시를 한다던지 .. 데이터라는 옵션을 통해 화면상에 렌더링,바인딩해야하는 부분들을
           코드로 만들어 사용하게된다. create는 그런 옵션에 대한 설정을 완료하는 시점이라고 생각하면된다.
- beforeMount : 컴퍼넌트가 DOM에 추가되기 직전
- mounted : 컴퍼넌트가 DOM에 추가되고나서 호출
- beforeUpdate : 컴퍼넌트가 DOM에 추가된 후에 데이터가 변형이되면, 재렌더링이 실행된다. 재 렌더링 되기직전의 이벤트 훅
- updated : 재렌더링을 마치고 난 후의 이벤트 훅
- beforeDestory : 컴퍼넌트를 빠져나갈때, 다른 컴퍼넌트로 이동할때. 컴퍼넌트가 제거되기 직전에 호출되는 훅
- destroyed : 컴퍼넌트가 완전히 제거된 후의 훅

요런 라이프사이클 시점마다 필요한 코드를 작성할 수 있다.


결국 vue에서 가장중요한것은 데이터 핸들링 ..


14. Vue 에서 data를 핸들링하는 방법

<script>
export default {
    data() {
        return {
            
        }
    }
}
</script>

이 retunr 안에다 핸들링할 데이타를 넣는다.

<template>
    <div>
        <h1>Welcome to {{title}}</h1>
    </div>
</template>

<script>
export default {
    data() {
        return {
            title: "앙꼬오오모리원쥬",
            title2: "토쿠니꾸망성쥬"
        }
    }
}
</script>

그리고 {{ }}이걸 이용해 바인딩을 시켜준다.

여기까지는 사용자에게 보여주는방식.

사용자에게서 데이터를 받아올땐?

*html에서의 value = vue 에선 v-model 이다.
<input type="text" v-model="title2" />
요런식으로 데이터 바인딩가능. v-model 쓸땐 중괄호 필요없는듯

*html에서의 onclick = vue 에선 @click 이다.

그리고 Vue.js에선 메소드를 정리해두는 공간이 있다.

<script>
export default {
    data() {
        return {
            title: "앙꼬오오모리원쥬",
            title2: "토쿠니꾸망성쥬"
        }
    },
    methods: {
        
    }
}
</script>

바로 요렇게 data는 data대로, method는 method대로 넣어주면됨.
호오 아주깔끔해

<template>
    <div>
        <h1>Welcome to {{title}}</h1>
        <input type="text" v-model="title2" />
        <button type="button" @click="getData">Get</button>
    </div>
</template>

<script>
export default {
    data() {
        return {
            title: "앙꼬오오모리원쥬",
            title2: "토쿠니꾸망성쥬"
        }
    },
    methods: {
        getData() {
            alert(this.title2)
        }
    }
}
</script>

요런식으로 !
그리고 사용자가 input값을 바꾸면 title2도 같이 변경이되는걸 확인할수있다.
뷰는 이렇게 투웨이바인딩을 지원한다.

<template>
    <div>
        <h1>Welcome to {{title}}</h1>
        <input type="text" v-model="title2" />
        <button type="button" @click="getData">Get</button>
        <button type="button" @click="setData">Set</button>
    </div>
</template>

<script>
export default {
    data() {
        return {
            title: "앙꼬오오모리원쥬",
            title2: "토쿠니꾸망성쥬"
        }
    },
    methods: {
        getData() {
            alert(this.title2)
        },
        setData() {
            this.title2 = "12345";
        }
    }
}
</script>

이렇게 set/get으로 데이터를 컨트롤 할 수 있다.
아주 간단하게 !


15. 라이프사이클에 맞게 메소드 만들기

<script>
export default {
    data() {
        return {
            title: "앙꼬오오모리원쥬",
            title2: "토쿠니꾸망성쥬"
        }
    },
    methods: {
        getData() {
            alert(this.title2)
        },
        setData() {
            this.title2 = "12345";
        },
    },
        beforeCreate() {
            console.log("beforeCreate");
        },
        created() {
            console.log("created");
        },
        beforeMount() {
            console.log("beforeMount");
        },
        mounted() {
            console.log("mounted");
        },
        beforeUpdate() {
            console.log("beforeUpdate");
        },
        updated() {
            console.log("updated");
        },
        beforeDestroy() {
            console.log("beforeDestroy");
        },
        destroyed() {
            console.log("destroyed");
        }
}
</script>

이건 원래있는 메소드라서 methods:안에 안넣는것같다.
이걸넣고 다시 웹을 실행하게되면

beforeCreate
created
beforeMount
mounted

기본적으로 요렇게 네개가 뜨고,

데이터를 조작하게되면
beforeUpdate
updated
이게뜨는군

만약 데이터가 변형되는순간 어떤 프로그램코드를 적용하고싶다 하면
저 메소드에 뭔가 정의를 하면됨 ㅎㅎ오

예를들면 ..
created나 beforeCreate는 화면이 띄워지기전 특정 데이터를 미리 가져와서 보여줘야한다면,
created같은 곳에 데이터를 바인딩해주고
mount될때 바로 화면에 렌더링되서 같이 적용되서 표시하게끔 .. 이런식으로도 설계가능.


16. watch

뷰에서 또 중요한개념인 watch.
우리가 정의한 데이터가 변경될때  watch안에 method처럼 기술해 넣으면 변화를 캐치해서 알 수 있다.
기존에 input의 값을 가져오기위해선 버튼을 만들고 .. getDate메소드를 만들고..해야하는데
watch가 있으면 그런것없이 변화하는즉시 값을 가져올 수 있다.

<script>
export default {
    data() {
        return {
            title: "앙꼬오오모리원쥬",
            title2: "토쿠니꾸망성쥬"
        };
    },
    watch: {
        title2() {
            console.log(this.title2);
        }
    },
    ...
    
이렇게!



17. 컨트롤 해야할 데이터가 배열형식이라면?

<select class="form-control">
  <option :key="i" :value="d.v" v-for="(d,i) in options">{{d.t}}</option>
</select>

key값은 보통 index의 i를 많이쓰는것같고 ,, v-for로 배열을 돌림. 그리고 :value로 밸류값 설정가능하다.

 data() {
        return {
            title: "앙꼬오오모리원쥬",
            title2: "토쿠니꾸망성쥬",
            options: [
                {v:"S", t:"Seoul"},
                {v:"J", t:"Jeju"},
                {v:"B", t:"Busan"}
            ]
        };
    },
    
    요건 데이터 부분
    
    
     <select class="form-control" v-model="region">
       <option :key="i" :value="d.v" v-for="(d,i) in options">{{d.t}}</option>
     </select>
     
     그리고 이렇게 v-model을 이용해
     data() {
        return {
            title: "앙꼬오오모리원쥬",
            title2: "토쿠니꾸망성쥬",
            options: [
                {v:"S", t:"Seoul"},
                {v:"J", t:"Jeju"},
                {v:"B", t:"Busan"}
            ],
            region: "J",
        };
    },
    
    간단하게 기본값 설정도 가능하다!!!!
    대박..
    
   
   테이블의 경우는 ?
   
   <table class="table table-bordered">
     <tr :key="i" v-for="(d,i) in options">
       <td>{{d.v}}</td>
       <td>{{d.t}}</td>
     </tr>
   </table>

   요렇게하면 끝 ...
   와 ..... 신세계당
   
   
   >> 오마케니 셀렉트바 선택할때마다 alert으로 선택값 알려주는기능
   
    <select class="form-control" v-model="region" @change="changeRegion">
      <option :key="i" :value="d.v" v-for="(d,i) in options">{{d.t}}</option>
    </select>
    
    @change 걸어주고
    
    methods: {
        getData() {
            alert(this.title2)
        },
        setData() {
            this.title2 = "12345";
        },
        changeRegion() {
            alert(this.region);
        }
    },
    
    메소드 생성해주면 끝.
    
    this를 사용하는 이유는 java와 같은개념으로 이해를 하면 되는건가 ? 찾아봐야겠다.



18. 원할때만 테이블을 보여줄때

v-if : 특정 조건이 만족될때에 렌더링을 시켜줌.
 <table class="table table-bordered" v-if="tableShow">
   <tr :key="i" v-for="(d,i) in options">
     <td>{{d.v}}</td>
     <td>{{d.t}}</td>
   </tr>
 </table>


    data() {
        return {
            title: "앙꼬오오모리원쥬",
            title2: "토쿠니꾸망성쥬",
            options: [
                {v:"S", t:"Seoul"},
                {v:"J", t:"Jeju"},
                {v:"B", t:"Busan"}
            ],
            region: "J",
            tableShow: false,
        };
        
  요런식으로 사용
  
  v-show 란것도있음.(사용방법같은듯)
  
  v-if는 조건이만족안하면 렌더링자체를 안함
  그러나 v-show는 렌더링은 하는데 안보여주고 보여주는것의 차이.
  v-if를 사용하게되면 렌더링을 삭제하고 띄우고 하는처리에서 리소스를 많이 잡아먹음
  화면에서 자주 보이고 안보이고하는건 v-show사용이 적절. (탭 같은경우)
  그러나 빈번하지않은경우, 만약 특정조건에 이르렀을때만 ! 그 조건이 일어날지 안일어날지 모를땐 v-if가 적절.
  
  
  
  

** export default ... 를 사용하는 이유는?
** this를 사용하는 이유




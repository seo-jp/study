async & await
clear style of using promise :)

1. async

1 function fetchUser() {
  // do network request in 10 sec...
  retunr 'ellie';
}

2 const user = fetchUser();
3 console.log(user);

순서 > 2-1-3

JS는 동기적 실행이기떄문에 위에서부터 하나하나 처리


function fetchUser() {
  return new Promise((resolve,reject) => {
    resolve('ellie');
  });
}

const user = fetchUser();
user.ther(console.log);
console.log(user);

이렇게 비동기로 바꿔주었다
근데 프로미스 없이 간편하게 비동기로 작성할 수 있는방법이 있음.

async function fetchUser() {
  return 'ellie'
}

const user = fetchUser();
user.ther(console.log);
console.log(user);

->이렇게 쓰면 코드블럭이 자동으로 promise로 바뀌는것이다..WOW


2. await

await은 async가 붙은 함수 안에서만 사용가능.

async function getApple() {
  await delay(3000); //3초뒤실행
  return 'apple';
}

async function getBanana() {
  await delay(3000); //3초뒤실행
  return 'Banana';
}

async function pickFruits() {
  const apple = await getApple();
  const banana = await getBanana();
  return `${apple} + ${banana} `;
}

pickFruits().then(console.log);

이렇게 간편히 비동기식으로 표현가능하다.
즉 저 위에껀 apple이 실행될때까지 기다려~ 이런느낌인가봐 .. apple 3초 기다리고
그다음에 실행되면 banana 3초 기다림. 순차적


위의 코드를 병렬적으로 하려면

function pickAllFruits() {
  return Promise.all([getApple(), getBanana()])
  .then(fruits => fruits.join(' + '));
 }
 
 pickAllFruits().then(console.log);

이렇게되면 사과,바나나 둘다 같이 실행.




